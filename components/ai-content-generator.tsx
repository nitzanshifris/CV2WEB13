"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { GlassCard } from "@/components/glassmorphism/glass-card"
import { ScrollReveal } from "@/components/scroll-reveal"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import {
  Sparkles,
  MessageSquare,
  FileText,
  ImageIcon,
  Loader2,
  Check,
  Copy,
  RefreshCw,
  ThumbsUp,
  ThumbsDown,
} from "lucide-react"

interface AiContentGeneratorProps {
  onGenerate: (content: string, type: string) => void
}

export function AiContentGenerator({ onGenerate }: AiContentGeneratorProps) {
  const [activeTab, setActiveTab] = useState("text")
  const [prompt, setPrompt] = useState("")
  const [generatedContent, setGeneratedContent] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [contentType, setContentType] = useState("bio")
  const [tone, setTone] = useState("professional")
  const [length, setLength] = useState("medium")
  const [copied, setCopied] = useState(false)
  const [feedback, setFeedback] = useState<"positive" | "negative" | null>(null)

  // Sample prompts for different content types
  const samplePrompts = {
    bio: "Write a professional bio for a software engineer with 5 years of experience in web development.",
    about:
      "Create an 'About Me' section for a graphic designer who specializes in brand identity and has worked with startups.",
    skills:
      "List and describe key skills for a data scientist with expertise in machine learning and data visualization.",
    experience:
      "Describe a work experience as a project manager who led a team of 10 people to deliver a successful product launch.",
    project: "Write a description for a portfolio project about an e-commerce website built with React and Node.js.",
  }

  // Function to generate content
  const generateContent = async () => {
    if (!prompt) return

    setIsGenerating(true)
    setGeneratedContent("")
    setFeedback(null)

    try {
      // Simulate API call with timeout
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // For demo purposes, we'll use predefined responses
      let result = ""

      if (activeTab === "text") {
        if (contentType === "bio") {
          result = `As a seasoned Software Engineer with over 5 years of specialized experience in web development, I've honed my expertise in building scalable, user-centric applications that solve real-world problems. My technical toolkit includes proficiency in JavaScript frameworks like React and Angular, coupled with strong backend skills in Node.js and Python.

Throughout my career, I've successfully delivered projects ranging from high-traffic e-commerce platforms to data-intensive dashboard applications, consistently meeting tight deadlines and exceeding client expectations. I'm particularly passionate about clean code architecture and performance optimization, having reduced load times by 40% on my most recent project.

I thrive in collaborative environments where I can contribute to architectural decisions while mentoring junior developers. My approach combines technical excellence with clear communication, ensuring that complex solutions are delivered with precision and understood by all stakeholders.

Always eager to expand my knowledge, I'm currently exploring cloud-native technologies and serverless architectures to build even more resilient and scalable systems.`
        } else if (contentType === "about") {
          result = `Hello! I'm a passionate graphic designer specializing in brand identity, with a particular focus on helping startups establish their visual presence in competitive markets. My design philosophy centers on creating clean, purposeful visuals that communicate a brand's unique story and values.

Working with startups has taught me the importance of adaptability and strategic thinking. I don't just create pretty designs; I develop comprehensive visual systems that can evolve as a company grows, ensuring brand consistency across all touchpoints.

My process is deeply collaborative. I believe the best results come from a true partnership with clients, where I take the time to understand their vision, audience, and business goals before putting pen to paper (or cursor to artboard).

When I'm not designing, you'll find me exploring art exhibitions, photographing urban architecture, or experimenting with new creative techniques that I can bring back to my client work.`
        } else {
          result = `This is a generated sample for the selected content type. In a real implementation, this would be generated by an AI model based on your specific prompt and parameters.

The content would be tailored to match your selected tone (${tone}) and length (${length}), providing you with ready-to-use text for your website.

You can customize this further by editing the generated content or adjusting your prompt to get different results.`
        }
      } else if (activeTab === "image") {
        result =
          "Image generation would be implemented here, connecting to an image generation API to create visuals based on your prompt."
      }

      setGeneratedContent(result)
    } catch (error) {
      console.error("Error generating content:", error)
      setGeneratedContent("Sorry, there was an error generating content. Please try again.")
    } finally {
      setIsGenerating(false)
    }
  }

  // Function to use sample prompt
  const useSamplePrompt = () => {
    setPrompt(samplePrompts[contentType as keyof typeof samplePrompts] || "")
  }

  // Function to copy content to clipboard
  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedContent)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  // Function to handle feedback
  const handleFeedback = (type: "positive" | "negative") => {
    setFeedback(type)
    // In a real implementation, this would send feedback to the server
  }

  // Function to use generated content
  const useGeneratedContent = () => {
    onGenerate(generatedContent, activeTab)
  }

  return (
    <ScrollReveal>
      <GlassCard className="p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-bold">AI Content Generator</h2>
          <Badge variant="outline" className="bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300">
            <Sparkles className="h-3 w-3 mr-1" />
            AI Powered
          </Badge>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid grid-cols-2 mb-6">
            <TabsTrigger value="text" className="flex items-center gap-2">
              <FileText className="h-4 w-4" />
              <span>Text</span>
            </TabsTrigger>
            <TabsTrigger value="image" className="flex items-center gap-2">
              <ImageIcon className="h-4 w-4" />
              <span>Image</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="text">
            <div className="space-y-6">
              <div>
                <div className="flex justify-between mb-2">
                  <label className="text-sm font-medium">What would you like to generate?</label>
                  <Button variant="ghost" size="sm" onClick={useSamplePrompt} className="h-6 text-xs">
                    Use sample prompt
                  </Button>
                </div>
                <Textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="Describe what you want to generate..."
                  rows={4}
                  className="resize-none"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">Content Type</label>
                  <Select value={contentType} onValueChange={setContentType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select content type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="bio">Professional Bio</SelectItem>
                      <SelectItem value="about">About Me</SelectItem>
                      <SelectItem value="skills">Skills Description</SelectItem>
                      <SelectItem value="experience">Work Experience</SelectItem>
                      <SelectItem value="project">Project Description</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">Tone</label>
                  <Select value={tone} onValueChange={setTone}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select tone" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">Professional</SelectItem>
                      <SelectItem value="casual">Casual</SelectItem>
                      <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                      <SelectItem value="technical">Technical</SelectItem>
                      <SelectItem value="creative">Creative</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">Length</label>
                  <Select value={length} onValueChange={setLength}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select length" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="short">Short</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="long">Long</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Button onClick={generateContent} disabled={!prompt || isGenerating} className="w-full">
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Generate Content
                  </>
                )}
              </Button>

              {generatedContent && (
                <div className="mt-6 border rounded-md p-4">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-sm font-medium">Generated Content</h3>
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm" onClick={() => generateContent()} disabled={isGenerating}>
                        <RefreshCw className="h-3 w-3 mr-1" />
                        Regenerate
                      </Button>
                      <Button variant="outline" size="sm" onClick={copyToClipboard}>
                        {copied ? (
                          <>
                            <Check className="h-3 w-3 mr-1" />
                            Copied
                          </>
                        ) : (
                          <>
                            <Copy className="h-3 w-3 mr-1" />
                            Copy
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                  <div className="prose prose-sm max-w-none dark:prose-invert">
                    {generatedContent.split("\n\n").map((paragraph, index) => (
                      <p key={index}>{paragraph}</p>
                    ))}
                  </div>
                  <div className="mt-4 flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-muted-foreground">Was this helpful?</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleFeedback("positive")}
                        className={feedback === "positive" ? "text-green-500" : ""}
                      >
                        <ThumbsUp className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleFeedback("negative")}
                        className={feedback === "negative" ? "text-red-500" : ""}
                      >
                        <ThumbsDown className="h-4 w-4" />
                      </Button>
                    </div>
                    <Button onClick={useGeneratedContent}>Use This Content</Button>
                  </div>
                </div>
              )}
            </div>
          </TabsContent>

          <TabsContent value="image">
            <div className="space-y-6">
              <div>
                <label className="text-sm font-medium mb-2 block">Describe the image you want to generate</label>
                <Textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  placeholder="E.g., A professional headshot of a software developer with a modern city background..."
                  rows={4}
                  className="resize-none"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">Style</label>
                  <Select defaultValue="realistic">
                    <SelectTrigger>
                      <SelectValue placeholder="Select style" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="realistic">Realistic</SelectItem>
                      <SelectItem value="cartoon">Cartoon</SelectItem>
                      <SelectItem value="3d">3D Render</SelectItem>
                      <SelectItem value="sketch">Sketch</SelectItem>
                      <SelectItem value="painting">Painting</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">Aspect Ratio</label>
                  <Select defaultValue="square">
                    <SelectTrigger>
                      <SelectValue placeholder="Select aspect ratio" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="square">Square (1:1)</SelectItem>
                      <SelectItem value="portrait">Portrait (3:4)</SelectItem>
                      <SelectItem value="landscape">Landscape (16:9)</SelectItem>
                      <SelectItem value="wide">Wide (2:1)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Button onClick={generateContent} disabled={!prompt || isGenerating} className="w-full">
                {isGenerating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Generate Image
                  </>
                )}
              </Button>

              {generatedContent && (
                <div className="mt-6 border rounded-md p-4">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-sm font-medium">Generated Image</h3>
                    <Button variant="outline" size="sm" onClick={() => generateContent()} disabled={isGenerating}>
                      <RefreshCw className="h-3 w-3 mr-1" />
                      Regenerate
                    </Button>
                  </div>
                  <div className="h-64 bg-muted/20 rounded-md flex items-center justify-center">
                    <p className="text-muted-foreground">Image preview would appear here</p>
                  </div>
                  <div className="mt-4 flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-muted-foreground">Was this helpful?</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleFeedback("positive")}
                        className={feedback === "positive" ? "text-green-500" : ""}
                      >
                        <ThumbsUp className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleFeedback("negative")}
                        className={feedback === "negative" ? "text-red-500" : ""}
                      >
                        <ThumbsDown className="h-4 w-4" />
                      </Button>
                    </div>
                    <Button onClick={useGeneratedContent}>Use This Image</Button>
                  </div>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>

        <div className="mt-6 text-xs text-muted-foreground">
          <MessageSquare className="h-3 w-3 inline mr-1" />
          AI-generated content may require editing to match your specific needs and ensure accuracy.
        </div>
      </GlassCard>
    </ScrollReveal>
  )
}
